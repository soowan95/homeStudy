2023.07.10 Mon
-숫자
    자바에서는 따옴표가 없는 숫자는 숫자로 인식함.
    ex) System.out.println(1+3); 하면 4가 출력됨.
-문자와 문자열
    문자는 한 글자를 의미하고, 문자열은 여러 개의 문자가 결합한 것. 자바에서 문자는 '(작은따음표)로 감싸야 함. 문자열은 "(큰따옴표)로 감싸야 함.
    ex) System.out.println('문자열'); 은 문자열을 작은따음표로 감쌓기 때문에 컴파일 오류발생.
    ex) System.out.println("문"); 은 문 을 출력함. 문자 하나도 문자열이기 때문.
    \를 앞에 위치시키면 특수기호를 문자로 사용할 수 있고 이것을 escape(이스케이프)라고 함. (\n은 줄바꿈)
    ex) System.out.println("\"문\"은 문자열"); 은 "문"은 문자열 이 출렴됨.
-데이터타입
    데이터의 크기 : 8bit(비트) = 1byte(바이트) (뒤로는 1024배씩 증가 byte->kilobyte->megabyte->gigabyte->terabyte->petabyte->exabyte->zettabyte)
    정수형 데이터 타입 : 데이터 타입 | 메모리의 크기 
                        byte         1byte
                        short        2byte
                        int          4byte
                        long         8byte
                        데이터 타입별로 담을 수 있는 크기가 다르고 보통은 int를 사용함. long을 사용하면 당연히 int보다 큰 수를 저장할 수 있지만 작은 수를 저장하더라도 8byte의 메모리를 사용하기 때문에 효율이 떨어짐.
    실수형 데이터 타입 : 데이터 타입 | 메모리의 크기
                        float        4byte
                        double       8byte
    문자의 데이터 타입 : 데이터 타입 | 메모리의 크기
                        char         2byte    
    기본 데이터타입 : byte, short, int, long, float, double, char, boolean
-형 변환
    각각 다른 데이터형을 갖고 있기 때문에 상황에 따라 형 변환이 필요함.
    ex) double a = 3.0F; 이것은 double 타입의 변수 a에 float 타입의 상수 3.0F를 대입하고 있다. 하지만 double 타입이 float 타입보다 더 많은 수를 표현할 수 있어 java가 자동으로 형 변환 해주기 때문임.
    ex) float a = 3.0; 이것은 double보다 더 좁은 표현범위를 갖고 있는 float 타입의 변수 a에 double 타입의 상수 3.0을 대입하려 해서 컴파일 오류가 발생함.
        위의 예제에서 명시적으로 형변환이 가능함. ex) float a = (float)3.0;
-연산자
    대입 연산자, 산술 연산자, 비교 연산자, 논리 연산자 등이 있음.
    산술 연산자 : + , - , * , / , %(나머지) ex) OeratorDemo.java 참고
    단항연산자 : +(양수를 표현, 쓸 일 없음) , -(음수를 표현) , ++(증가 연산자로 항의 값을 1씩 증가 시킴) , --(감소 연산자로 항의 값을 1씩 감소 시킴) ex) PrePostDemo.java 참고
-Boolean
    참과 거짓을 의미하는 데이터 타입.
    ex) boolean a = 1 == 1; System.out.println(a); 하면 true 를 출력함.
-비교 연산자
    비교 연산자의 결과는 true나 false 중의 하나임.
    == : 좌항과 우항이 같은지 비교하는 연산자.
    != : 좌항과 우항이 같지 않은지 비교하는 연산자.
    > , < , >= , <= 보이는 그대로임.
    문자열을 비교할 때는 .equals 라는 문법을 사용해야 함. (뒤에 나오겠지만 각각 다른 인스턴스에 저장된 문자열은 다른 코드를 갖고 있어서 .equals라는 문법을 사용하지 않고 == 를 통해 비교하면 false가 출렴됨.)
-조건문
    if문과 switch문이 있음.
    if문의 구조 :  if(조건절 : true나 false중에 하나가 와야함){
                                      then 절
                   } else {
                       조건절이 false일 때 이곳에 있는 것이 실행됨.
                   } (then 절이나 else 뒤에 if문을 추가하여 조건을 추가하는 것도 가능함.)
    switch문의 구조 : switch(특정값 a : 이 특정값에 들어갈 수 있는 데이터타입는 byte, short, char, int, enum, String과 byte, short, char, int의 wrapper들 뿐임.){
                     case 특정값 b:
                            실행할 것;
                     case 특정값 c:
                            실행할 것;
                     } (case의 수 제한은 없음. switch의 괄호 안에 있는 특정값과 case의 특정값을 비교하여 실행하는데 case문에 break;가 없다면 일치하는 특정값 이후의 모든 case가 같이 실행됨.)
-논리 연산자
    &&은 and 논리 연산자이고 좌항과 우항의 boolean값을 비교하여 출력.
    ex) true && true -> true
        true && false -> false
        false && true -> false
        false && false -> false
    ||은 or 논리 연산자이고 좌항과 우항의 boolean값을 비교하여 출력.
    ex) true || true -> true
        true || false -> true
        false || true -> true
        false || false -> false
    !은 not이고 boolean의 값을 반전 시키는 역할을 함.
    ex) !true -> false
        !false -> true

2023.07.11 Tue
-반복문(Loop)
    while문과 for문이 있음.
    while문의 구조 : while(조건이 참일 동안) {
                            반복 실행 영역
                    }
    for문은 while문을 기본으로 함.
    for문의 구조 : for(초기화; 종료조건; 반복실행) {
                        반복 실행 영역
                   }
    while문과 for문의 ex) LoopDemo.java 참고
    반복문은 종료조건 외에 break를 통해서 강제로 종료시킬 수 있음.
-배열(Array)
    연관된 정보를 그룹핑 하는데 사용함.
    ex) String[] classGroup = {"최진혁", "최유빈", "한이람", "이고잉"}; (원하는 데이터타입 뒤에 []를 추가해 배열을 생성할 수 있음. 그 배열 안에는 배열과 같은 데이터타입만 담겨야 함.)
    배열은 0번부터 시작되며 배열의 원소에 대한 호출은 [0], [1]과 같이 번호로 호출함.
    ex) 위의 예제에서 classGroup[2]는 배열의 3번째인 한이람 이 출력됨. System.out.println(classGroup[2]); -> 한이람
    배열을 정의하는 또 다른 방법은 배열의 인스턴스를 만들고 그때 배열의 크기를 설정하는 것임.
    ex) String[] classGroup = new String[4]; 는 4칸짜리 배열을 생성하는 것임
        classGroup[0] = "최진혁"; classGroup[1] = "최유빈"; classGroup[2] = "한이람"; classGroup[3] = "이고잉"; 을 통해 직접 원소들을 정의할 수 있음.
    그 배열의 크기를 알아보는 문법은 .length임.
    ex) classGroup.length 는 4임.
-for each 문법
    배열 예제에 있는 classGroup 배열을 가지고 예를들면
    ex) for (String e : classGroup) {} 에 있는 e는 classGroup에 있는 원소를 차례로 출력하는 문법임.
-메소드
    직접 작성한 코드를 실행하는 함수라고 생각하면 됨.
    class라는 메소드를 정의하고 싶으면 class() {} 에서 중괄호 안에 원하는 코드를 작성하면 되고, 호출하고 싶으면 class();처럼 중괄호 없이 끝내면 됨.
    main 메소드는 실제로 실행시키고 싶은 코드를 위치시켜야 하는 약속임. 그냥 약속이라 이해할 필요 없이 외우면 됨. (public static void main(String[] args){}전체가 약속임.)
    문법적으로 메소드 앞에는 void, String, int 같은 데이터타입이 오고 void를 제외한 데이터타입은 그 메소드의 return 값은 반드시 메소드 앞에 있는 데이터타입과 같아야 한다는 것임.
    void는 return 값이 존재하지 않는 다는 말임.
-입력과 출력
    위에서 말한 약속된 main 메소드에서는 입력값을 String[] args로 고정해 놨음.
    앱이 실행 중에 데이터를 입력하는 방법은 ScannerDemo.java와 Scanner2Demo.java 참고.
-객체 지향 프로그래밍(Object-Oriented Programming, OOP)
    로직을 상태와 행위로 이루어진 객체로 만드는 것임. 이 객체들을 가지고 조립하여 하나의 프로그램을 만드는 것이 OOP임.
-클래스와 인스턴스
    쉬운 예로 클래스는 설계도로 생각하고 인스턴스는 그 설계도로 만든 제품이라고 생각하면 됨.
-클래스 맴버와 인스턴스 맴버
    맴버는 변수와 메소드로 구성됨. 인스턴스 변수는 각각의 인스턴스마다 다른 값을 담게 됨.
    클래스 변수는 static 문법을 통해 지정할 수 있고 모든 인스턴스에서 그대로 사용하고 싶을 때 사용함. 하지만 인스턴스에서 수정은 가능함. 아마 final을 통해 제한할 수 있음.
    인스턴스 메소드는 클래스 맴버에 접근 할 수 있지만, 클래스 메소드는 인스턴스 맴버에 접근 할 수 없음. 클래스 맴버가 항상 인스턴스보다 먼저 있기 때문.

2023.07.12 Wed
-유효범위(Scope)
    메소드 안에서 변수를 선언하면 그 메소드 안에서만 유효함.
    클래스에서 static을 이용해 지정한 변수를 전역변수라 함. 어떤 메소드 안에 특별히 지정하지 않은 변수는 전역변수를 사용함.
    ex) public class Example {static int i;} (i는 전역변수)
    this. 문법을 통해 메소드 안에서 전역변수를 호출할 수 있고 이것은 클래스와 메소드에서 사용할 변수의 이름이 같지만 각각 다른 역할을 하고 싶을 때 사용함
    ex) Calculator.java 참고
    하지만 메소드나 main클래스에서 새롭게 지정한 변수는 지역변수라 하고 전역변수와는 다름.
    ex) ScopeDemo.java 참고
-생성자
    클래스에 생성자가 없을 때는 java에서 임의로 기본생성자를 생성함.
    기본생성자는 접근제어자나 출력값을 지정하지 않음.
    ex) public class Example {} 에서 Example메소드를 지정하지 않으면 기본 생성자 Example(){} 을 java가 임의로 생성한 뒤 실행함.
-상속
    부모클래스가 갖고 있는 형질을 그대로 자식클래스에게 물려주는 것임.
    부모클래스를 다양한 사람, 다양한 곳에 사용하고 있을 때 부모클래스는 변형시키지 않으면서 그 안에 새로운 기능을 추가하고 싶을 때나 부모클래스의 일부분만을 변경하고 싶을 때 사용함.
    extends를 이용하여 상속함.
    ex) class a{public void Example(){}} \n class b extends a{public void Example2(){}} -> b는 a를 상속하고 있음. b에는 메소드 Example과 Example2를 다 가지고 있음.
    상속받기 전에는 항상 기본생성자가 부모클래스에 있어야함. 부모클래스에 기본생성자가 아닌 생성자를 직접 생성한 경우 java는 자동으로 기본생성자를 생성하지 않으므로 사용자가 직접 기본생성자를 생성해야 함.
    super는 부모클래스의 생성자임.
-Overriding
    부모클래스의 메소드를 자식클래스에서 변경할 수 있음.
    ex) Inherit.java line20 참고
    overriding할 때는 부모메소드의 출력값이나 파라미터의 데이터타입과 수와 자식메소드의 출력값이나 파라미터의 데이터타입과 수는 같아야 함.
-Overloading
    하나의 메소드가 여러 종류의 파라미터를 갖을 수 있게 하는 것.
    ex) public void Example(int i, int j){} \n public void Example(int i, int j, int k) {}
    overloading도 overriding과 마찬가지로 출력값이 같아야 함.
    ex) public void Example(){} \n public int Example(){} 두 메소드는 출력값이 다르기 때문에 오류발생
-클래스 패스
    같은 디렉토리에 있는 클래스만 가져다가 사용할 수 있음.
-환경변수
    운영체제에 지정하는 변수로 클래스를 어디에 저장할지 경로를 정하는 것임.
-패키지(Package)
    다른 디렉토리 안에는 같은 이름의 파일이 공존할 수 있음.
-접근 제어자
    누가 사용할 것인지에 대한 권한의 차등을 두는 것.
    메소드의 접근 제어자는 public, protected, default, private가 있음.
    권한     | 같은 클래스 | 같은 패키지 | 다른 패키지/서브 클래스 | 관계없음 (서브클래스는 다른 패키지에 있는 부모클래스를 의미)
    public   |     O      |      O      |           O            |    O
    protected|     O      |      O      |           O            |    X
    default  |     O      |      O      |           X            |    X
    private  |     O      |      X      |           X            |    X
    클래스의 접근 제어자는 public, default가 있음.
    public클래스는 다른 패키지에서 사용가능 하고 default는 불가능함.
    public클래스의 이름은 소스코드의 이름과 같아야함. 즉 하나의 소스코드에는 하나의 public클래스만 존재함.
-추상(Abstract)
    추상 클래스는 반드시 그것을 상속 받는 클래스를 이용해야만 사용 가능함. 추상 메소드도 마찬가지로 상속 받는 클래스 안에서 overriding 해야함. 
    추상 클래스는 내용이 있는 구체적인 메소드도 사용 가능함.
-Final
    추상과는 반대로 사용자가 임의로 변경하지 못하게 규제하는 것.
-인터페이스(Interface)
    추상과 마찬가지로 어떠한 틀을 사용자에게 규제하는 것인데 추상과는 다르게 구체적인 메소드는 사용할 수 없음. 오직 메소드의 파라미터만을 제한할 수 있음.
    implements를 통해 인터페이스를 사용할 수 있음. 상속에서의 extends와 비슷함. 클래스의 상속과는 다르게 여러개의 인터페이스를 사용할 수 있음.
    인터페이스의 멤버는 항상 public이여야 함. 인터페이스끼리는 상속 가능.
    인터페이스의 메소드는 로직이 없음. ex) interface I {public void Example();} (메소드에 {}가 없음.)
-다형성
    자녀클래스를 이용하여 인스턴스를 만들 때 부모클래스의 데이터타입으로 지정할 수 있음. 그 성질에 관한 구체적인 예는
    ex) Inherit.java 참고

2023.07.13 Thu
-예외(Exception)
    java에서 발생할 수 있는 여러 오류들을 예외라고 부름.
    예를들어 실수를 0으로 나누려 하면 수리적예외라는 ArithmeticException이 발생.
    try-catch 문법을 통해 예외를 잡을 수 있음. try{예외가 발생하기 전까지 실행} catch(Exception e){예외가 발생한 후 이곳이 실행} (catch안의 Exception은 특정한 예외를 지정할 수도 있음.)
    예외의 뒷수습에는 e.getMessage(), e.toString(), e.printStackTrace()가 있음.
    e.getMessage() : 가장 간단한 예외상황을 출력함. ex) / by zero
    e.toString() : 조금 더 자세한 예외상황을 출력함. ex) java.lang.ArithmeticException: / by zero
    e.printStackTrace() : 가장 자세한 예외상황을 출력함.
    ArithmeticException 외에도 다양한 예외들이 존재하고 이 예외들을 다중캐치 할 수 있음.
    ex) try{} catch(ArithmeticException e){System.out.println(1)} catch(ArrayIndexOutOfBoundsException e){System.out.println(2)}
        (산술적예외가 발생하면 1이 배열 밖의 Index를 호출했을 때의 예외가 발생하면 2가 출력.)
    다중캐치를 할 때 Exception e를 다른 캐치보다 먼저 실행하면 오류가 발생. Exception e는 모든 예외를 포함하기 때문.
    try-catch와 함께 사용되는 finally라는 문법이 있음. try{} catch(){} finally{예외여부와 관계없이 실행되는 로직}
    예외를 try-catch를 통해 직접 해결할 수도 있지만 throws를 통해 사용자가 해결하도록 할 수 있음.
    ex) ThrowException.java 참고
    if(){throw new Exception} 문법을 통해 직접 예외를 만들어 사용자의 행동을 제한할 수 있음.
    ex) MakeException.java 참고
    주요 예외들
    예외                      | 사용해야 할 상황
    IllegalArgumentException  | 매개변수가 의도하지 않은 상황을 유발시킬 때
    IllegalStateException     | 매소드를 호출하기 위한 상태가 아닐 때
    NullPointerException      | 매개변수 값이 null일 때
    IndexOutOfBoundsException | 인덱스 매개변수 값이 범위를 벗어날 때
    ArithmeticException       | 산술적인 연산에 오류가 있을 때
    예외에는 checked예외와 unchecked예외가 있음.
    예외의 상속관계는 Object -> Throwable -> Exception -> RuntimeException -> 여러Exception (Object는 모든 클래스의 부모클래스)
                                         -> Error     \> IOException (Error는 java자체의 문제로 발생하는 것으로 사용자가 할 수 있는 것은 없음.)
    RuntimeException을 부모클래스로 갖는 예외들은 unchecked예외로 예외처리를 하지않아도 컴파일 오류가 발생하지 않음.
    하지만 RuntimeException을 부모클래스로 갖지 않는 Exception과 IOException은 checked예외로 반드시 예외처리를 해야함.
    ex) MyException.java 참고
-Object 클래스
    어떠한 클래스도 상속 받지 않는 모든 클래스는 Object 클래스를  상속 받고 있음.
    ex) class o {} 는 class o extends Object {} 와 정확히 일치함.
    Object클래스에도 여러가지 메소드가 있고 그 때문에 모든 클래스는 그 메소드를 상속 받고 있음. 가장 대표적인 메소드로는 toString, equals, finalize, clone이 있음.
    toString은 객체를 문자로 표현하는 메소드임. 당연히 overriding 가능.
    equals는 객체와 객체가 같은 것인지 비교하는 메소드임.
    finalize는 객체가 소멸될 때 호출되기로 약속된 메소드. 웬만하면 잘 쓰이지 않음.
    clone은 복제임. 어떤 객체가 있을 때 그 객체와 똑같은 객체를 만드는 메소드임.
    ex) LearnObject.java 참고
-Enum
    배열을 쉽게 만들고 그 배열의 index에게도 여러 정보를 담을 때 사용함.
    ex) PracticeEnum.java 참고
-참조(Reference)
    기본 데이터타입이 아닌 new로 생성하는 데이터타입을 참조 데이터타입이라고 부름.
    ex) PracticeReference.java 참고
-제네릭(Generic)
    클래스 내부에서 사용할 데이터타입을 외부에서 지정하는 기법.
    구조 class Example<T>{
        public T something;
    }
    Example<String> e1 = new Example<String>(); (이때 T가 String이 되면서 something의 데이터타입은 String이 됨.)
    코드를 작성한 뒤 컴파일 할때 오류가 발생한다면 쉽게 알아차리고 수정할 수 있지만 컴파일 단계에서 오류가 발생하지 않는다면 후에 문제가 됨. 이를 방지하기 위해 제네릭을 사용함.
    ex) LearnGeneric의 Object사용 부분 참고
    한 클래스 내에서 복수의 제네릭을 사용할 수 있음. 제네릭에서 사용할 수 있는 데이터타입은 참조 데이터타입만 올 수 있음.
    main메소드에서 제네릭에서 지정해야 할 데이터타입을 임의로 지정하고 있다면 <>을 생략 가능함.
    메소드에서도 제네릭을 사용 가능함. 마찬가지로 생략도 가능함.
    ex) public <U> void Example(U i){}
    제네릭을 제한할 수도 있음. 제네릭에서 사용되는 extends는 상속받는다는 의미가 아니라 부모가 누구냐는 의미이므로 인터페이스도 가능함. ex) LearnGeneric의 line37 참고
-컬렉션즈 프래임워크(Collections Framework)
    배열은 그 크기를 지정해야하고 그보다 더 많은 인자는 저장할 수 없다는 한계를 쉽게 극복할 수 있도록 도와주는 것.
    ArrayList를 통해 그 한계를 극복할 수 있음. ArrayList에서 인자를 추가하는 방법은 .add를 이용하는 것인데 이때의 데이터타입은 Object임. 그래서 제네릭을 통해서 데이터타입을 지정할 수 있음.
    ex) PracticeArrayList.java 참고
    컬렉션즈 프래임워크에는 Collection과 Map이라는 가장 큰 카테고리가 있음.
    Collection밑에는 Set, List, Queue가 있고 그 밑에도 구성요소가 있음.
    Set은 하나의 집합으로 생각하면 됨. List는 순서대로 정보를 저장한다고 생각하면 됨. 그래서 Set은 똑같은 정보를 여러개 저장할 수 없지만 List는 가능함.
    iterator()은 모든 컬렉션즈 프래임워크가 갖고 있는 메소드임. iterator의 API를 보면 인터페이스이고 .hasNext와 .next, .remove를 갖고 있음.
    .hasNext는 배열안에 정보가 남아 있는지를 확인하는 boolean임. .next는 배열안의 인자 중 가장 먼저 있는 인자를 출력하고 참조된 배열 안에서만 제거함.
    ex) LearnCollections.java 참고
    Map은 key와 value라는 집합이 있고 정의역 key가 value의 치역에 하나씩 대응하는 함수라고 생각하면 됨.
    ex) LearnMap.java 참고
