2023.08.29 Tue
웹 서버(Web) : 클라이언트가 GET, POST 등의 메소드를 이용해 전송한 요청을 받아 HTML이나 오브젝트를 HTTP 프로토콜을 이용해 전송하는 프로그램.
              웹 페이지, 이미지 등의 정적인 컨텐츠만 제공 가능.
웹 애플리케이션 서버(WAS, Web Application Server) : 웹 서버 + 웹 컨테이너(JSP와 Servlet을 실행시킬 수 있는 SW)로 동적인 컨텐츠를 제공.
  JSP : HTML 내부에 Java 코드가 있음. 코드를 작성하기 간편함.
  Servlet : Java 코드 내부에 HTML이 있음. 읽고 쓰기가 불편함.
    JSP로 작성된 프로그램은 서버로 요청시 Servlet파일로 변환되어 JSP 태그를 분해하고 추출하여 순수한 HTML을 반환함.
     1. 클라이언트가 웹 컨테이너에 어떤 .jsp 파일을 요청
     2. 웹 컨테이너가 .jsp파일을 읽음
     3. 웹 컨테이너가 .jsp파일을 변환하여 Servlet파일(.java)을 생성
     4. .java파일은 다시 .class파일로 컴파일 됨
     5. Excute를 통해 HTML파일을 생성하여 웹 컨테이너에 전달
     6. 웹 컨테이너는 HTTP 프로토콜을 통해 HTML을 클라이언트에게 전달

2023.08.30 Wed
Gradle : Groovy를 기반으로 한 빌드 도구. Ant와 Maven과 같은 이전 세대 빌드 도구의 단점을 보완한 오픈소스 빌드 도구.
         XML 언어가 아닌 JVM에서 동작하는 DSL을 사용함. Maven의 중앙 저장소도 지원해 라이브러리를 모두 그대로 사용 가능.
  Ant : XML 기반. 유연하지만 스크립트 관리나 빌드 과정이 복잡. 생명주기가 없어 각각의 결과물에 대한 의존관계 등을 정의해야 함.
  Maven : XML 기반. 생명주기와 프로젝트 객체 모델(POM)이 도입. Ant의 장황한 빌드 스크립트를 개선. 상대적으로 학습 장벽이 높음.
로깅 : 시스템이 동작할 때 시스템의 상태 및 동작 정보를 시간 경과에 따라 기록하는 것. 적절한 수준의 로그 기록 기준을 잡지 못하면 문제가 생김.
      초기의 스프링은 JCL(Jakarta Commons Logging)을 사용해 로깅을 구현했지만 최근에는 JCL이 가진 문제를 해결하기 위해 컴파일 시점에서 구현체를 선택하는 SLF4J를 사용함.
      SLF4J의 구현체는 Logback이고 Logback은 log4j에 비해 여러 변경들에 대해 서버를 재시작할 필요 없이 자동 리로딩을 지원한다는 장점이 있음.
Welcome Page : src.main.resources.static 디렉토리에 index.html을 만들면 웰컴페이지가 됨. (기억이 안나면 spring.io에서 spring의 기능들을 찾아 볼 수 있음.)
템플릿 엔진 : 지정된 템플릿 양식과 데이터가 합쳐져서 HTML 문서를 출력하는 SW.
  사용이유 1. 코드의 간결화 2. 높은 재사용성 3. 유지보수 용이
cmd에서 spring서버 실행하기 : 해당디렉토리로 이동 후 gradlew build 입력. cd build/libs 를 통해 build안에 있는 libs로 이동. dir을 통해 .jar파일 java -jar로 실행.

2023.08.31 Thu
@ResponseBody 사용 원리 : viewResolver 대신에 HttpMessageConverter가 동작함. 기본 문자 처리는 StringGttpMessageConverter. 기본 객체 처리는 MappingJackson2HttpMessageConverter. 등 여러 Converter가 있음.
개발한 기능을 테스트 할 때 보통 main 메서드를 통해 실행하거나, 웹 애플리케이션의 컨트롤러를 통해 실행하지만 자바는 JUnit이라는 프레임워크로 쉽게 테스트를 실행함.
@Test를 통해서 쉽게 테스트 할 수 있음. 클래스 단계에서의 실행으로 여러 메서드를 한번에 테스트 할 수 있지만 순서가 정해져 있지 않기 때문에 테스트는 서로 독립적으로 설계되야 함.
그러기 위해서 @AfterEach를 통해 각 테스트 종료시 실행할 메서드를 생성해 정보를 초기화 해줘야 함.
TTD : 테스트 주도 개발.

2023.09.04 Mon
ctrl + alt + v : 해당 매소드에 대한 반환 타입과 변수 자동 작성.
ctrl + alt + shift + t : refactor 메뉴.
ctrl + shift + t : test 생성.
ctrl + alt + t : surround 생성.
ctrl + shift + / : 전체 주석.
레포지토리의 메소드들의 이름은 직관적으로 알기 쉽게 하지만 서비스에 있는 메소드들은 그 기능을 알기 쉽게 비지니스 적인 용어를 사용하는 것이 보통임.
test의 메소드 명은 한글로 작성해도 무관함.
test 할 때 모든 경우는 아니지만 처음 연습할 때는 given, when, then의 구조로 연습하는 것이 좋음.

2023.09.05 Tue
MVC : Model(DB 담당), View(UI 담당), Controller(입력 담당)
@Controller : 사용자의 요청이 진입하는 지점으로 어떤 처리를 할지 결정함. Layered Architecture에서 처리한 View를 사용자에게 응답으로 보내줌.
@Autowired : 스프링 컨테이너에 등록한 빈에게 의존관계주입이 필요할 때 DI를 도와줌. 생정자가 하나면 생략 가능.
@Service : Controller에서 넘어온 값들에 대해 해당하는 Model을 호출
스프링 빈을 등록하는 2가지 방법
  1. 컴포넌트 스캔(@Controller, @Service, @Repository 등)과 자동 의존관계 설정
  2. 자바 코드로 직접 스프링 빈 등록(@Configuration, @Bean 사용)
DI 설정 방법에는 생정자 주입, 필드 주입, setter 주입이 있는데 필드 주입은 한번 설정 후 변경이 안돼서 거의 안쓰이고 setter는 public해야 해서 임의로 변경될 가능성이 있어 생성자 주입을 사용하는 것이 가장 좋음.

2023.09.06 Wed
H2DB 실행하기 : window는 H2/bin에 있는 h2.bat을 실행. 연결 후 바탕화면에 test.mv.db확인하고 JDBC URL을 jdbc:h2:tcp://localhost/~/test로 변경.

2023.09.07 Thu
@SpringBootTest : 스프링 컨테이너와 테스트를 함께 실햄
@Transactional을 통해 테스트를 진행하면 테스트 실행 전 트랜잭션을 시작하고, 완료 후 데이터베이스를 자동으로 롤백해줌
통합테스트(springboot) 보다는 단위테스트를 지향해야 함.

2023.09.14 Thu
AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍, 각각의 관심사에 따라 모듈화 하는 것.
  적용 후 의존관계 : 스프링 컨테이너는 프록시(가짜 객체)를 생성하고 joinPoint.proceed() 후에 실제 객체를 호출함.
@Component 를 통해 스프링 빈으로 등록.
@Aspect 을 통해 해당 class가 Aspect를 나타내는 class라는 것을 명시.
@Around() 을 통해 적용할 범위 설정 가능.